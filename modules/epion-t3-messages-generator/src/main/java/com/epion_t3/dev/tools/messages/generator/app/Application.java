package com.epion_t3.dev.tools.messages.generator.app;

import com.epion_t3.core.common.bean.spec.Content;
import com.epion_t3.core.common.bean.spec.ET3Spec;
import com.epion_t3.core.common.bean.spec.Message;
import com.epion_t3.core.common.type.ExitCode;
import com.epion_t3.dev.tools.messages.generator.bean.Property;
import com.fasterxml.jackson.databind.DeserializationFeature;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.dataformat.yaml.YAMLFactory;
import com.zomu.t.lib.java.generate.common.context.ConvertContext;
import com.zomu.t.lib.java.generate.common.context.ConvertTarget;
import com.zomu.t.lib.java.generate.common.type.DefaultTemplate;
import com.zomu.t.lib.java.generate.java8.converter.Java8Converter;
import com.zomu.t.lib.java.generate.java8.model.ClassModel;
import org.apache.commons.cli.*;

import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.StringWriter;
import java.nio.file.Paths;
import java.util.*;

public class Application {

    private static final Options OPTIONS = new Options();

    static {
        OPTIONS.addOption("t", "target", true, "target spec file.");
        OPTIONS.addOption("m", "message-output", true, "messages.properties generate place.");
        OPTIONS.addOption("j", "java-output", true, "enum java generate place.");
    }


    public static void main(String[] args) {

        CommandLineParser parser = new DefaultParser();
        CommandLine cmd = null;

        // 初期化オプションがあれば初期化処理を呼び出す
        try {
            cmd = parser.parse(OPTIONS, args, true);
        } catch (ParseException e) {
            System.err.println("Args Error...");
            e.printStackTrace(System.err);
            System.exit(ExitCode.ERROR.getExitCode());
        }

        YAMLFactory yamlFactory = new YAMLFactory();
        ObjectMapper objectMapper = new ObjectMapper(yamlFactory);

        // 知らない要素は無視する
        objectMapper.configure(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES, false);

        try {
            ET3Spec et3Spec = objectMapper.readValue(Paths.get("/Users/takashimanozomu/work/30_pgworkspaces/intellij/epion-t3/submodules/epion-t3-basic/src/main/resources/et3_basic_spec_config.yaml").toFile(), ET3Spec.class);
            Map<String, List<Property>> messageMap = new HashMap<>();
            for (Message message : et3Spec.getMessages()) {
                for (Content content : message.getMessage()) {
                    if (messageMap.containsKey(content.getLang())) {
                        messageMap.get(content.getLang()).add(Property.builder().key(message.getId())
                                .value(content.getContents()).build());
                    } else {
                        messageMap.put(content.getLang(), new ArrayList<>());
                    }
                }
            }
            for (Map.Entry<String, List<Property>> entry : messageMap.entrySet()) {

                // プロパティ作成
                Properties prop = new Properties();
                for (Property property : entry.getValue()) {
                    prop.put(property.getKey(), property.getValue());
                }
                try (FileOutputStream fos = new FileOutputStream(
                        new File(cmd.getOptionValue("m"),
                                et3Spec.getInfo().getName() + "_messages_" + entry.getKey() + ".properties"));) {
                    prop.store(fos, "Generated by epion-t3-message-generator");
                }


                // Enum作成
                Java8Converter converter = new Java8Converter();
                ConvertContext convertContext = new ConvertContext();
                ConvertTarget convertTarget = new ConvertTarget();
                convertContext.getTargets().add(convertTarget);


                ClassModel clazz = new ClassModel();


                convertTarget.setClazz(clazz);
                convertTarget.setTemplatePath(DefaultTemplate.JAVA8.getPath());
                StringWriter sw = new StringWriter();
                convertTarget.setOutputWriter(sw);
                convertContext.getTargets().add(convertTarget);

                converter.convert(convertContext);


            }

        } catch (IOException e) {
            e.printStackTrace();
        }

        System.exit(ExitCode.NORMAL.getExitCode());

    }

}
